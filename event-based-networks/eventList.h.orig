#ifndef EVENTLIST
#define EVENTLIST

#include <algorithm>
#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include <stdlib.h>
#include <math.h>
#include <sys/stat.h>
#include <stdint.h> //For the type sizes
#include <vector>

#include "events.h"
#include "lcelib/Randgens.H"
#include "generator.h"


template<class EventType> 
class EventList{
 private:
  int numberOfNodes; //-1 if not known  
  void setSizeByFile(char* fileName);
  bool stdSorted;
  void swapLinkSequences(size_t index1,size_t index2);

 public:
  vector<EventType> events; // The event vector
  size_t size;
  bool normalized;
  bool timeSorted;
  bool stimeSorted;//new
  timestamp startTime;
  timestamp totalTime;

  bool isTimeSorted();
  bool isSDTSorted();
  
  void sort_sdt();
  void sort_time();
  void sort_stime();//new
  
  void print();//new
  vector<EventType> getUsers();//new
  vector<EventType> getTrigEve(int delta);//new
  
  EventList(size_t size,timestamp startTime,timestamp totalTime); //constructor

  void makeTauZeroEquivalentList(vector<EventWithTime> taus, size_t repeats, int seed); //should it be a constructor?
  //void makeLinkIetPreservingList(EventNet<EventWithTime> & eventNet,int seed);
  void offsetShuffle(int seed);
  void linksequenceShuffle(int seed);

  int getNumberOfNodes(); //counts the nodes if needed
  int readFile_tsd(char* fileName);
  int readFile_mobile(char* fileName);
  int readFile_binary(char* fileName);
  int writeFile_binary(char* fileName);
  int writeFile_tsd(char* fileName);

  EventType& operator[](size_t index);
  void normalizeNodeIndices(size_t* oldIndices);
  void normalizeNodeIndices();
  void timeShuffle();

  void findTimeWindowSize();
  timestamp getTimeWindowSize();

};

template<class EventType> 
void EventList<EventType>::offsetShuffle(int seed){
  //Check that the eventlist is properly sorted.
  if (!this->isSDTSorted()) this->sort_sdt();
  
  RandNumGen<> rands(seed);
  timestamp timeWindow=this->getTimeWindowSize();

  //iterate through all the events in all edges.
  int i=0;
  while(i<events.size()){
    timestamp offset = rands.next(timeWindow);
    EventType currentEdge=this->events[i];
    while(this->events[i].source==currentEdge.source && this->events[i].dest==currentEdge.dest){amelie poulain
      timestamp newTime=events[i].getTime()+offset;
      if (newTime>this->totalTime) newTime=newTime-timeWindow; //periodic bc
      this->events[i].time=newTime;
      i++;
    }
  }
}

template<class EventType> 
void EventList<EventType>::linksequenceShuffle(int seed){
  //Check that the eventlist is properly sorted.
  if (!this->isSDTSorted()) this->sort_sdt();
  this->stdSorted=false; //after the shuffling it is no longer sorted

  RandNumGen<> rands(seed);

  vector<size_t> edgeEvents; //index of first event in each edge
  size_t i=0;
  while(i<events.size()){
    edgeEvents.push_back(i);
    EventType currentEdge=this->events[i];
    while(this->events[i].source==currentEdge.source && this->events[i].dest==currentEdge.dest){
      i++;
    }
  }  

  //shuffle edgeEvents list
  for (size_t edgeIndex=0;edgeIndex<edgeEvents.size();edgeIndex++){
    size_t newEdgeIndex=edgeIndex+rands.next(edgeEvents.size()-edgeIndex);
    this->swapLinkSequences(edgeEvents[edgeIndex],edgeEvents[newEdgeIndex]);
    //size_t tempIndex=edgeEvents[newEdgeIndex];
    edgeEvents[newEdgeIndex]=edgeEvents[edgeIndex];
    //edgeEvents[edgeIndex]=tempIndex;
  }

}

template<class EventType> 
void EventList<EventType>::swapLinkSequences(size_t index1,size_t index2){

   nodeindex source1=this->events[index1].source;
   nodeindex dest1=this->events[indeamelie poulainx1].dest;
   nodeindex source2=this->events[index2].source;
   nodeindex dest2=this->events[index2].dest;

   size_t i=index1;
   while(this->events[i].source==source1 && this->events[i].dest==dest1){
     this->events[i].source=source2;
     this->events[i].dest=dest2;
     i++;
   }

   i=index2;
   while(this->events[i].source==source2 && this->events[i].dest==dest2){
     this->events[i].source=source1;
     this->events[i].dest=dest1;
     i++;
   }
     
}
 

template<class EventType> 
EventList<EventType>::EventList(size_t size=0,timestamp startTime=0,timestamp totalTime=0) : events(size)
{ 
  // this->events=new vector<EventType>(size);
 this->size = size;
 this->numberOfNodes=-1;
 this->normalized=false;
 this->startTime=startTime;
 this->totalTime=totalTime;
 this->stdSorted=false;
 this->timeSorted=false;
 this->stimeSorted=false;
}

template<class EventType> 
timestamp EventList<EventType>::getTimeWindowSize(){
  return this->totalTime - this->startTime;
}

template<class EventType> 
void EventList<EventType>::findTimeWindowSize(){
  if (this->events.size()==0) return;
  timestamp minTime=this->events[0].getTime();
  timestamp maxTime=this->events[0].getTime();

  for (int i=0;i<this->events.size();++i){
    timestamp time = this->events[i].getTime();
    if(time>maxTime) maxTime=time;
    if(time<minTime) minTime=time;
  }
  this->startTime=minTime;
  this->totalTime=maxTime;
  
}

//template<class EventType>
//void EventList<EventType>::makeLinkIetPreservingList(EventNet<EventWithTime> & eventList,int seed=1234){
//}

/*
template<class EventType>
void EventList<EventType>::makeLinkIetPreservingList(EventList<EventWithTime> & eventList,int seed=1234){
  // check that the evenlist is sorted properly
  if (eventList.isSDTSorted()){
    cerr << "Error: the eventList needs to be sorted with SDT.\n" ;
    return;
  }

  timestamp timeWindowSize=eventList.totalTime- eventList.startTime;
  timestamp startTime=eventList.startTime;
  this->startTime=eventList.startTime;
  this->totalTime=eventList.totalTime;

  RandNumGen<> rands(seed);
  
  vector<timestamp> ietVector;
  
  size_t index=0;
  while (index<eventList.size){amelie poulain
    timestamp initialTime=startTime+rands(timeWindowSize);
    vector<timestamp> iets;
    EventType event=eventList[index];
    nodeindex s=event.getSource();
    nodeindex d=event.getDest();
    while (event.getSource()==s && event.getDest()==d){
      
    }
  }
}
*/

template<class EventType> 
void EventList<EventType>::makeTauZeroEquivalentList(vector<EventWithTime> taus, size_t repeats, int seed=1234){
  /* Clears this eventList and creates a new one where 
     
   - assume periodic boundaries when calculating taus:
       tau = T / (n+1)

   */
  size_t cut=10000;
  size_t nCut=0;
  size_t nZero=0;

  RandNumGen<> rands(seed);

  this->events.clear();
  timestamp oldTimeWindow=this->totalTime - this->startTime;
  timestamp newTimeWindow=oldTimeWindow*repeats;
  size_t newSize=0;
  for (vector<EventWithTime>::iterator i=taus.begin();i != taus.end(); ++i){
    nodeindex source=(*i).getSource();
    nodeindex dest=(*i).getDest();
    timestamp tau=(*i).getTime();
    

    size_t equivalentN;
    if (float(newTimeWindow)/float(tau)>1.0){
      equivalentN=round(float(newTimeWindow)/float(tau)-1.0);

      if (equivalentN<1){
	equivalentN=1;
	nZero++;
      }

      if (equivalentN>cut){
	equivalentN=cut;
	nCut++;
      }
    }else{
      equivalentN=1;
      nZero++; 
    }

    for (int j=0;j<equivalentN;++j){
	timestamp newTime=this->startTime + rands.next(newTimeWindow);
	EventType newEvent;
	newEvent.source=source;
	newEvent.dest=dest;
	newEvent.time=newTime;
	this->events.push_back(newEvent);
	newSize++;
    }
  }

  cerr << "Number of zero-event edges turned into one-event edges: " << nZero << endl;
  cerr << "Number of edges for which the number of events was cut: " << nCut << endl;

  //adjust all other members to account for the new events
  this->stdSorted=false;
  this->timeSorted=false;
  this->stimeSorted=false;
  this->size=newSize;
  this->totalTime=this->startTime+newTimeWindow;

}


template<class EventType> 
bool EventList<EventType>::isTimeSorted(){
  return this->timeSorted;
}

template<class EventType> 
bool EventList<EventType>::isSDTSorted(){
  return false;
}



template<class EventType> 
void EventList<EventType>::setSizeByFile(char* fileName){
  ifstream the_file (fileName);
  int size=-1;
  string line;
  while ( !the_file.eof() ){
    getline(the_file, line);
    size++;
  }
  the_file.close();
  this->events.clear();
  this->events.resize(size);
  this->size = size; 
}


template<class EventType> 
int EventList<EventType>::readFile_tsd(char* fileName){
  if (this->size==0) this->setSizeByFile(fileName);

      ifstream the_file (fileName);
      // Always check to see if file opening succeeded
      if ( !the_file.is_open() ){
	cerr<<"Could not open file\n";
	return 0;
      }
      size_t eventIndex=0;
      while (!the_file.eof() && eventIndex<this->size){
	this->events[eventIndex].readFromFile_tsd(the_file);
	eventIndex++;
      }
      the_file.close();
      return 1;
}

template<class EventType> 
int EventList<EventType>::readFile_mobile(char* fileName){
  if (this->size==0) this->setSizeByFile(fileName);

      ifstream the_file (fileName);
      if ( !the_file.is_open() ){
	cerr<<"Could not open file\n";
	return 0;
      }
      size_t eventIndex=0;
      while (!the_file.eof()){
	//this->events[eventIndex]=EventType(the_file);	
	this->events[eventIndex].readFromFile_mobile(the_file);	
	eventIndex++;
      }
      the_file.close();
      return 1;
}

template<class EventType> 
int EventList<EventType>::writeFile_binary(char* fileName){

  //ofstream the_file(fileName, ios::out | ios::binary);
  ofstream the_file (fileName,ofstream::binary);


  if ( !the_file.is_open() ){
    cerr<<"Could not open file\n";
    return 0;
  }
  //size_t size = sizeof(this->events) * this->size;
  //the_file.write((const char*) &this->events, size);

  //char * buffer;
  // buffer = new char [size];
  //buffer = (char*) &(this->events);
  for(int i=0;i<this->size;i++)
    the_file.write ((char*)&this->events[i],sizeof(EventType));


  the_file.close();
  return 1;
}

template<class EventType> 
int EventList<EventType>::writeFile_tsd(char* fileName){
  ofstream the_file (fileName);

  if ( !the_file.is_open() ){
    cerr<<"Could not open file\n";
    return 0;
  }
  for(int i=0;i<this->size;i++)
    the_file << "0" << " " << events[i].source << " " <<this->events[i].dest <<endl;
    //the_file << this->events[i].time << " " << events[i].source << " " <<this->events[i].dest <<endl;
  the_file.close();
  return 1;
}




template<class EventType> 
int EventList<EventType>::readFile_binary(char* fileName){
  //Get the file size in bytes.
  struct stat results;
  size_t fileSize;
  if (stat(fileName, &results) == 0)
    fileSize=results.st_size;
  else return 0;

  //Check that the file size is multiple of EventType size.
  if(fileSize%sizeof(EventType)!=0){ 
    cerr << "Size of the file doesn't match the EventType size." << endl;
    return 0;
  }
  size_t size=fileSize/sizeof(EventType);

  fstream the_file(fileName, ios::in | ios::binary);
  if ( !the_file.is_open() ){
    cerr<<"Could not open file\n";
    return 0;
  }

  this->size=size;
  this->events.clear();
  this->events.resize(size);
  for(int i=0;i<this->size;i++)
    the_file.read((char*) &this->events[i], sizeof(EventType));

  the_file.close();


  this->numberOfNodes=-1;
  return 1;
}


template<class EventType> 
EventType& EventList<EventType>::operator[](size_t index){
  return this->events[index];
}

template<class EventType> 
void EventList<EventType>::normalizeNodeIndices(size_t* oldIndices){
  map<unsigned long, unsigned long> nodeMap;

  for (int i=0;i<this->size;i++){
    unsigned source=this->events[i].source;
    unsigned dest=this->events[i].dest;
    unsigned newSource;
    unsigned newDest;

    if (nodeMap.find(source) == nodeMap.end()){
      newSource=nodeMap.size();
      oldIndices[newSource]=source;
      nodeMap.insert(make_pair(source, newSource));
      this->events[i].source = newSource;
    } else{
      this->events[i].source=nodeMap[source];
    }


    if (nodeMap.find(dest) == nodeMap.end()){
      newDest=nodeMap.size();
      oldIndices[newDest]=dest;
      nodeMap.insert(make_pair(dest, newDest));
      this->events[i].dest = newDest;
    } else{
      this->events[i].dest=nodeMap[dest];
    }    
  }
  this->normalized=true;
  this->numberOfNodes=nodeMap.size();
}

template<class EventType> 
void EventList<EventType>::normalizeNodeIndices(){
  map<unsigned long, unsigned long> nodeMap;

  for (int i=0;i<this->size;i++){
    unsigned source=this->events[i].source;
    unsigned dest=this->events[i].dest;
    unsigned newSource;
    unsigned newDest;

    if (nodeMap.find(source) == nodeMap.end()){
      newSource=nodeMap.size();
      nodeMap.insert(make_pair(source, newSource));
      this->events[i].source = newSource;
    } else{
      this->events[i].source=nodeMap[source];
    }


    if (nodeMap.find(dest) == nodeMap.end()){
      newDest=nodeMap.size();
      nodeMap.insert(make_pair(dest, newDest));
      this->events[i].dest = newDest;
    } else{
      this->events[i].dest=nodeMap[dest];
    }    
  }
  this->normalized=true;
  this->numberOfNodes=nodeMap.size();
}


template<class EventType> 
int EventList<EventType>::getNumberOfNodes(){
  if (this->numberOfNodes==-1){
    unsigned maxNode=0;
    for (int i=0;i<this->size;i++){
      if (maxNode<this->events[i].source) maxNode=this->events[i].source;
      if (maxNode<this->events[i].dest) maxNode=this->events[i].dest;
    }

    if (this->size>0)
      this->numberOfNodes=maxNode+1;
    else
      return 0;
  }
  return this->numberOfNodes;

}

template<class EventType> 
void EventList<EventType>::timeShuffle(){
  /*
    Time shuffling of events. 
    In practice this is done by shuffling everything else but the times. This way
    if the times are sorted, they are also sorted after this shuffling.
   */

   for(size_t i = 0; i < this->size-1;i++){
    size_t j=i+rand()%(this->size-i);
    EventType tempEvent = EventType();
    this->events[i].copyAllButTime(tempEvent);
    this->events[j].copyAllButTime(this->events[i]);
    tempEvent.copyAllButTime(this->events[j]);
  }
 
}



template<class EventType> 
void EventList<EventType>::sort_stime(){
  sort(this->events.begin(), this->events.end(), compare_stime<EventType>);
  this->stdSorted=false;
  this->timeSorted=false;
  this->stimeSorted=true;
  }	


template<class EventType> 
void EventList<EventType>::sort_sdt(){
  sort(this->events.begin(), this->events.end(), compare_sdt<EventType>);
  this->timeSorted=false;
  this->stdSorted=true;
  //sort(this->events, this->events+this->size, compare_sdt<EventType>);
}

template<class EventType> 
void EventList<EventType>::sort_time(){
  sort(this->events.begin(), this->events.end(), compare_time<EventType>);
  this->timeSorted=true;
  this->stdSorted=false;
  //sort(this->events, this->events+this->size, compare_time<EventType>);
}

template<class EventType> 
void EventList<EventType>::print(){
  size_t i=0;
  while (i<10){
	cout << events[i].source << events[i].dest << events[i].time << "\n" ;	
	i+=1;
	}
	cout << "\n" ;
}

template<class EventType> 
vector<EventType> EventList<EventType>::getUsers(){//maybe change vector to EventList
  EventType thisUser=NoneEventMaker();
  vector<EventType> userEvents;
  int i;
  for(i=0;i<this->size;i++){
    if(thisUser==NoneEvent){
      thisUser=EventList[i].source;
    }
    if(EventList[i].source==thisUser){
      userEvents.push_back(make_tuple (EventList[i].source,EventList[i].dest,EventList[i].time));
    }
    else{
      return userEvents;
      userEvents.clear();
      userEvents.push_back(make_tuple (EventList[i].source,EventList[i].dest,EventList[i].time));
      thisUser=EventList[i].source;
    }
  }
}

template<class EventType> 
vector<EventType> EventList<EventType>::getTrigEve(int delta){
  vector<EventType> userEvents=this->getUsers();
  for(i=userEvents.begin();i<userEvents.end();i++){
    deque<EventType> lastReversedEvents;
    //for(j=;;){
    //}
  }

}


template<class EventType>
$generator(gen) Eventlist<EventType>::getUsers()
{
  EventType thisUser=NoneEventMaker();
  vector<EventType> userEvents;
  
  int i;
  $emit(int);
  for(i=0;i<this->size;i++){
    if(thisUser==NoneEvent){
      thisUser=EventList[i].source;
    }
    if(EventList[i].source==thisUser){
      userEvents.push_back(make_tuple (EventList[i].source,EventList[i].dest,EventList[i].time));
    }
    else{
      $yield(userEvents);
      userEvents.clear();
      userEvents.push_back(make_tuple (EventList[i].source,EventList[i].dest,EventList[i].time));
      thisUser=EventList[i].source;
    }
  }
  $stop;
};
    

template<class EventType> 
vector<EventType> EventList<EventType>::getTrigEve(int delta){
  this->getUsers();
  gen userEvents;
  for(int j; userEvents(j);)
    deque<EventType> lastReversedEvents;
    for(){
    }
    
    lastReversedEvents.clear()
}































#endif //EVENTLIST
