# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_eventpy', [dirname(__file__)])
        except ImportError:
            import _eventpy
            return _eventpy
        if fp is not None:
            try:
                _mod = imp.load_module('_eventpy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _eventpy = swig_import_helper()
    del swig_import_helper
else:
    import _eventpy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


NOTIME = _eventpy.NOTIME
DEFAULTDURATION = _eventpy.DEFAULTDURATION
DEFAULTDELAY = _eventpy.DEFAULTDELAY
class TimeStamp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeStamp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeStamp, name)
    __repr__ = _swig_repr
    def getTime(self): return _eventpy.TimeStamp_getTime(self)
    def setTime(self, *args): return _eventpy.TimeStamp_setTime(self, *args)
    def __init__(self, *args): 
        this = _eventpy.new_TimeStamp(*args)
        try: self.this.append(this)
        except: self.this = this
    def getLongTimeStr(self): return _eventpy.TimeStamp_getLongTimeStr(self)
    __swig_destroy__ = _eventpy.delete_TimeStamp
    __del__ = lambda self : None;
TimeStamp_swigregister = _eventpy.TimeStamp_swigregister
TimeStamp_swigregister(TimeStamp)

class NoTimeStamp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTimeStamp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NoTimeStamp, name)
    __repr__ = _swig_repr
    def getTime(self): return _eventpy.NoTimeStamp_getTime(self)
    def setTime(self, *args): return _eventpy.NoTimeStamp_setTime(self, *args)
    def __init__(self, *args): 
        this = _eventpy.new_NoTimeStamp(*args)
        try: self.this.append(this)
        except: self.this = this
    def getLongTimeStr(self): return _eventpy.NoTimeStamp_getLongTimeStr(self)
    __swig_destroy__ = _eventpy.delete_NoTimeStamp
    __del__ = lambda self : None;
NoTimeStamp_swigregister = _eventpy.NoTimeStamp_swigregister
NoTimeStamp_swigregister(NoTimeStamp)

class Reverse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reverse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Reverse, name)
    __repr__ = _swig_repr
    def isReversed(self): return _eventpy.Reverse_isReversed(self)
    def __init__(self, *args): 
        this = _eventpy.new_Reverse(*args)
        try: self.this.append(this)
        except: self.this = this
    def getLongReverseStr(self): return _eventpy.Reverse_getLongReverseStr(self)
    __swig_destroy__ = _eventpy.delete_Reverse
    __del__ = lambda self : None;
Reverse_swigregister = _eventpy.Reverse_swigregister
Reverse_swigregister(Reverse)

class NoReverse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoReverse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NoReverse, name)
    __repr__ = _swig_repr
    def isReversed(self): return _eventpy.NoReverse_isReversed(self)
    def __init__(self, *args): 
        this = _eventpy.new_NoReverse(*args)
        try: self.this.append(this)
        except: self.this = this
    def getLongReverseStr(self): return _eventpy.NoReverse_getLongReverseStr(self)
    __swig_destroy__ = _eventpy.delete_NoReverse
    __del__ = lambda self : None;
NoReverse_swigregister = _eventpy.NoReverse_swigregister
NoReverse_swigregister(NoReverse)

class Duration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Duration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Duration, name)
    __repr__ = _swig_repr
    def getDuration(self): return _eventpy.Duration_getDuration(self)
    def setDuration(self, *args): return _eventpy.Duration_setDuration(self, *args)
    def __init__(self, *args): 
        this = _eventpy.new_Duration(*args)
        try: self.this.append(this)
        except: self.this = this
    def getLongDurationStr(self): return _eventpy.Duration_getLongDurationStr(self)
    __swig_destroy__ = _eventpy.delete_Duration
    __del__ = lambda self : None;
Duration_swigregister = _eventpy.Duration_swigregister
Duration_swigregister(Duration)

class NoDuration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoDuration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NoDuration, name)
    __repr__ = _swig_repr
    def getDuration(self): return _eventpy.NoDuration_getDuration(self)
    def setDuration(self, *args): return _eventpy.NoDuration_setDuration(self, *args)
    def __init__(self, *args): 
        this = _eventpy.new_NoDuration(*args)
        try: self.this.append(this)
        except: self.this = this
    def getLongDurationStr(self): return _eventpy.NoDuration_getLongDurationStr(self)
    __swig_destroy__ = _eventpy.delete_NoDuration
    __del__ = lambda self : None;
NoDuration_swigregister = _eventpy.NoDuration_swigregister
NoDuration_swigregister(NoDuration)

class elist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, elist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, elist, name)
    __repr__ = _swig_repr
    __swig_setmethods__["events"] = _eventpy.elist_events_set
    __swig_getmethods__["events"] = _eventpy.elist_events_get
    if _newclass:events = _swig_property(_eventpy.elist_events_get, _eventpy.elist_events_set)
    __swig_setmethods__["size"] = _eventpy.elist_size_set
    __swig_getmethods__["size"] = _eventpy.elist_size_get
    if _newclass:size = _swig_property(_eventpy.elist_size_get, _eventpy.elist_size_set)
    __swig_setmethods__["normalized"] = _eventpy.elist_normalized_set
    __swig_getmethods__["normalized"] = _eventpy.elist_normalized_get
    if _newclass:normalized = _swig_property(_eventpy.elist_normalized_get, _eventpy.elist_normalized_set)
    __swig_setmethods__["timeSorted"] = _eventpy.elist_timeSorted_set
    __swig_getmethods__["timeSorted"] = _eventpy.elist_timeSorted_get
    if _newclass:timeSorted = _swig_property(_eventpy.elist_timeSorted_get, _eventpy.elist_timeSorted_set)
    __swig_setmethods__["startTime"] = _eventpy.elist_startTime_set
    __swig_getmethods__["startTime"] = _eventpy.elist_startTime_get
    if _newclass:startTime = _swig_property(_eventpy.elist_startTime_get, _eventpy.elist_startTime_set)
    __swig_setmethods__["totalTime"] = _eventpy.elist_totalTime_set
    __swig_getmethods__["totalTime"] = _eventpy.elist_totalTime_get
    if _newclass:totalTime = _swig_property(_eventpy.elist_totalTime_get, _eventpy.elist_totalTime_set)
    def isTimeSorted(self): return _eventpy.elist_isTimeSorted(self)
    def isSDTSorted(self): return _eventpy.elist_isSDTSorted(self)
    def sort_sdt(self): return _eventpy.elist_sort_sdt(self)
    def sort_time(self): return _eventpy.elist_sort_time(self)
    def __init__(self, *args): 
        this = _eventpy.new_elist(*args)
        try: self.this.append(this)
        except: self.this = this
    def makeTauZeroEquivalentList(self, *args): return _eventpy.elist_makeTauZeroEquivalentList(self, *args)
    def offsetShuffle(self, *args): return _eventpy.elist_offsetShuffle(self, *args)
    def linksequenceShuffle(self, *args): return _eventpy.elist_linksequenceShuffle(self, *args)
    def getNumberOfNodes(self): return _eventpy.elist_getNumberOfNodes(self)
    def readFile_tsd(self, *args): return _eventpy.elist_readFile_tsd(self, *args)
    def readFile_mobile(self, *args): return _eventpy.elist_readFile_mobile(self, *args)
    def readFile_binary(self, *args): return _eventpy.elist_readFile_binary(self, *args)
    def writeFile_binary(self, *args): return _eventpy.elist_writeFile_binary(self, *args)
    def writeFile_tsd(self, *args): return _eventpy.elist_writeFile_tsd(self, *args)
    def normalizeNodeIndices(self, *args): return _eventpy.elist_normalizeNodeIndices(self, *args)
    def timeShuffle(self): return _eventpy.elist_timeShuffle(self)
    def findTimeWindowSize(self): return _eventpy.elist_findTimeWindowSize(self)
    def getTimeWindowSize(self): return _eventpy.elist_getTimeWindowSize(self)
    def __getitem__(self, *args): return _eventpy.elist___getitem__(self, *args)
    __swig_destroy__ = _eventpy.delete_elist
    __del__ = lambda self : None;
elist_swigregister = _eventpy.elist_swigregister
elist_swigregister(elist)

class ip(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ip, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ip, name)
    __repr__ = _swig_repr
    __swig_setmethods__["infected"] = _eventpy.ip_infected_set
    __swig_getmethods__["infected"] = _eventpy.ip_infected_get
    if _newclass:infected = _swig_property(_eventpy.ip_infected_get, _eventpy.ip_infected_set)
    __swig_setmethods__["size"] = _eventpy.ip_size_set
    __swig_getmethods__["size"] = _eventpy.ip_size_get
    if _newclass:size = _swig_property(_eventpy.ip_size_get, _eventpy.ip_size_set)
    __swig_setmethods__["numberOfInfected"] = _eventpy.ip_numberOfInfected_set
    __swig_getmethods__["numberOfInfected"] = _eventpy.ip_numberOfInfected_get
    if _newclass:numberOfInfected = _swig_property(_eventpy.ip_numberOfInfected_get, _eventpy.ip_numberOfInfected_set)
    __swig_setmethods__["infectingEventIndex"] = _eventpy.ip_infectingEventIndex_set
    __swig_getmethods__["infectingEventIndex"] = _eventpy.ip_infectingEventIndex_get
    if _newclass:infectingEventIndex = _swig_property(_eventpy.ip_infectingEventIndex_get, _eventpy.ip_infectingEventIndex_set)
    __swig_setmethods__["lastInfectedNode"] = _eventpy.ip_lastInfectedNode_set
    __swig_getmethods__["lastInfectedNode"] = _eventpy.ip_lastInfectedNode_get
    if _newclass:lastInfectedNode = _swig_property(_eventpy.ip_lastInfectedNode_get, _eventpy.ip_lastInfectedNode_set)
    __swig_setmethods__["rounds"] = _eventpy.ip_rounds_set
    __swig_getmethods__["rounds"] = _eventpy.ip_rounds_get
    if _newclass:rounds = _swig_property(_eventpy.ip_rounds_get, _eventpy.ip_rounds_set)
    __swig_setmethods__["startTime"] = _eventpy.ip_startTime_set
    __swig_getmethods__["startTime"] = _eventpy.ip_startTime_get
    if _newclass:startTime = _swig_property(_eventpy.ip_startTime_get, _eventpy.ip_startTime_set)
    __swig_setmethods__["eventList"] = _eventpy.ip_eventList_set
    __swig_getmethods__["eventList"] = _eventpy.ip_eventList_get
    if _newclass:eventList = _swig_property(_eventpy.ip_eventList_get, _eventpy.ip_eventList_set)
    def __init__(self, *args): 
        this = _eventpy.new_ip(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self, *args): return _eventpy.ip_reset(self, *args)
    def infectNext(self): return _eventpy.ip_infectNext(self)
    def infectAll(self): return _eventpy.ip_infectAll(self)
    def getTimeInEvents(self): return _eventpy.ip_getTimeInEvents(self)
    __swig_setmethods__["rEvents"] = _eventpy.ip_rEvents_set
    __swig_getmethods__["rEvents"] = _eventpy.ip_rEvents_get
    if _newclass:rEvents = _swig_property(_eventpy.ip_rEvents_get, _eventpy.ip_rEvents_set)
    __swig_setmethods__["rIndex"] = _eventpy.ip_rIndex_set
    __swig_getmethods__["rIndex"] = _eventpy.ip_rIndex_get
    if _newclass:rIndex = _swig_property(_eventpy.ip_rIndex_get, _eventpy.ip_rIndex_set)
    __swig_setmethods__["rCut"] = _eventpy.ip_rCut_set
    __swig_getmethods__["rCut"] = _eventpy.ip_rCut_get
    if _newclass:rCut = _swig_property(_eventpy.ip_rCut_get, _eventpy.ip_rCut_set)
    __swig_setmethods__["rSize"] = _eventpy.ip_rSize_set
    __swig_getmethods__["rSize"] = _eventpy.ip_rSize_get
    if _newclass:rSize = _swig_property(_eventpy.ip_rSize_get, _eventpy.ip_rSize_set)
    __swig_destroy__ = _eventpy.delete_ip
    __del__ = lambda self : None;
ip_swigregister = _eventpy.ip_swigregister
ip_swigregister(ip)


def getBC(*args):
  return _eventpy.getBC(*args)
getBC = _eventpy.getBC
class SimpleEvent(NoTimeStamp,NoReverse,NoDuration):
    __swig_setmethods__ = {}
    for _s in [NoTimeStamp,NoReverse,NoDuration]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [NoTimeStamp,NoReverse,NoDuration]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source"] = _eventpy.SimpleEvent_source_set
    __swig_getmethods__["source"] = _eventpy.SimpleEvent_source_get
    if _newclass:source = _swig_property(_eventpy.SimpleEvent_source_get, _eventpy.SimpleEvent_source_set)
    __swig_setmethods__["dest"] = _eventpy.SimpleEvent_dest_set
    __swig_getmethods__["dest"] = _eventpy.SimpleEvent_dest_get
    if _newclass:dest = _swig_property(_eventpy.SimpleEvent_dest_get, _eventpy.SimpleEvent_dest_set)
    def readFromFile_mobile(self, *args): return _eventpy.SimpleEvent_readFromFile_mobile(self, *args)
    def readFromFile_tsd(self, *args): return _eventpy.SimpleEvent_readFromFile_tsd(self, *args)
    def copyAllButTime(self, *args): return _eventpy.SimpleEvent_copyAllButTime(self, *args)
    def getSource(self): return _eventpy.SimpleEvent_getSource(self)
    def getDest(self): return _eventpy.SimpleEvent_getDest(self)
    def __init__(self, *args): 
        this = _eventpy.new_SimpleEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    def getReversedEvent(self): return _eventpy.SimpleEvent_getReversedEvent(self)
    def getLongEventInformation(self): return _eventpy.SimpleEvent_getLongEventInformation(self)
    __swig_destroy__ = _eventpy.delete_SimpleEvent
    __del__ = lambda self : None;
SimpleEvent_swigregister = _eventpy.SimpleEvent_swigregister
SimpleEvent_swigregister(SimpleEvent)

class etlist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, etlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, etlist, name)
    __repr__ = _swig_repr
    __swig_setmethods__["events"] = _eventpy.etlist_events_set
    __swig_getmethods__["events"] = _eventpy.etlist_events_get
    if _newclass:events = _swig_property(_eventpy.etlist_events_get, _eventpy.etlist_events_set)
    __swig_setmethods__["size"] = _eventpy.etlist_size_set
    __swig_getmethods__["size"] = _eventpy.etlist_size_get
    if _newclass:size = _swig_property(_eventpy.etlist_size_get, _eventpy.etlist_size_set)
    __swig_setmethods__["normalized"] = _eventpy.etlist_normalized_set
    __swig_getmethods__["normalized"] = _eventpy.etlist_normalized_get
    if _newclass:normalized = _swig_property(_eventpy.etlist_normalized_get, _eventpy.etlist_normalized_set)
    __swig_setmethods__["timeSorted"] = _eventpy.etlist_timeSorted_set
    __swig_getmethods__["timeSorted"] = _eventpy.etlist_timeSorted_get
    if _newclass:timeSorted = _swig_property(_eventpy.etlist_timeSorted_get, _eventpy.etlist_timeSorted_set)
    __swig_setmethods__["startTime"] = _eventpy.etlist_startTime_set
    __swig_getmethods__["startTime"] = _eventpy.etlist_startTime_get
    if _newclass:startTime = _swig_property(_eventpy.etlist_startTime_get, _eventpy.etlist_startTime_set)
    __swig_setmethods__["totalTime"] = _eventpy.etlist_totalTime_set
    __swig_getmethods__["totalTime"] = _eventpy.etlist_totalTime_get
    if _newclass:totalTime = _swig_property(_eventpy.etlist_totalTime_get, _eventpy.etlist_totalTime_set)
    def isTimeSorted(self): return _eventpy.etlist_isTimeSorted(self)
    def isSDTSorted(self): return _eventpy.etlist_isSDTSorted(self)
    def sort_sdt(self): return _eventpy.etlist_sort_sdt(self)
    def sort_time(self): return _eventpy.etlist_sort_time(self)
    def __init__(self, *args): 
        this = _eventpy.new_etlist(*args)
        try: self.this.append(this)
        except: self.this = this
    def makeTauZeroEquivalentList(self, *args): return _eventpy.etlist_makeTauZeroEquivalentList(self, *args)
    def offsetShuffle(self, *args): return _eventpy.etlist_offsetShuffle(self, *args)
    def linksequenceShuffle(self, *args): return _eventpy.etlist_linksequenceShuffle(self, *args)
    def getNumberOfNodes(self): return _eventpy.etlist_getNumberOfNodes(self)
    def readFile_tsd(self, *args): return _eventpy.etlist_readFile_tsd(self, *args)
    def readFile_mobile(self, *args): return _eventpy.etlist_readFile_mobile(self, *args)
    def readFile_binary(self, *args): return _eventpy.etlist_readFile_binary(self, *args)
    def writeFile_binary(self, *args): return _eventpy.etlist_writeFile_binary(self, *args)
    def writeFile_tsd(self, *args): return _eventpy.etlist_writeFile_tsd(self, *args)
    def normalizeNodeIndices(self, *args): return _eventpy.etlist_normalizeNodeIndices(self, *args)
    def timeShuffle(self): return _eventpy.etlist_timeShuffle(self)
    def findTimeWindowSize(self): return _eventpy.etlist_findTimeWindowSize(self)
    def getTimeWindowSize(self): return _eventpy.etlist_getTimeWindowSize(self)
    def __getitem__(self, *args): return _eventpy.etlist___getitem__(self, *args)
    __swig_destroy__ = _eventpy.delete_etlist
    __del__ = lambda self : None;
etlist_swigregister = _eventpy.etlist_swigregister
etlist_swigregister(etlist)

class enet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, enet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, enet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eventList"] = _eventpy.enet_eventList_set
    __swig_getmethods__["eventList"] = _eventpy.enet_eventList_get
    if _newclass:eventList = _swig_property(_eventpy.enet_eventList_get, _eventpy.enet_eventList_set)
    __swig_setmethods__["indexNet"] = _eventpy.enet_indexNet_set
    __swig_getmethods__["indexNet"] = _eventpy.enet_indexNet_get
    if _newclass:indexNet = _swig_property(_eventpy.enet_indexNet_get, _eventpy.enet_indexNet_set)
    def __init__(self, *args): 
        this = _eventpy.new_enet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eventpy.delete_enet
    __del__ = lambda self : None;
    def getLinkEventsDirected(self, *args): return _eventpy.enet_getLinkEventsDirected(self, *args)
    def getLinkEventsUndirected(self, *args): return _eventpy.enet_getLinkEventsUndirected(self, *args)
    def getLinkEventTimesDirected(self, *args): return _eventpy.enet_getLinkEventTimesDirected(self, *args)
    def getLinkEventTimesUndirected(self, *args): return _eventpy.enet_getLinkEventTimesUndirected(self, *args)
    def getInterEventTimes(self, *args): return _eventpy.enet_getInterEventTimes(self, *args)
    def getNeighborEvents(self, *args): return _eventpy.enet_getNeighborEvents(self, *args)
    def getAvgTauZero(self, *args): return _eventpy.enet_getAvgTauZero(self, *args)
    def getTauOnes(self, *args): return _eventpy.enet_getTauOnes(self, *args)
    def getAvgTauOne(self, *args): return _eventpy.enet_getAvgTauOne(self, *args)
    def getAvgTauInfApprox(self, *args): return _eventpy.enet_getAvgTauInfApprox(self, *args)
    def getAvgTauInfApprox_neighborhoodIet(self, *args): return _eventpy.enet_getAvgTauInfApprox_neighborhoodIet(self, *args)
    def makeLinkIetPreservingList(self, *args): return _eventpy.enet_makeLinkIetPreservingList(self, *args)
enet_swigregister = _eventpy.enet_swigregister
enet_swigregister(enet)

class EventWithTime(TimeStamp,NoReverse,NoDuration):
    __swig_setmethods__ = {}
    for _s in [TimeStamp,NoReverse,NoDuration]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventWithTime, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeStamp,NoReverse,NoDuration]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventWithTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source"] = _eventpy.EventWithTime_source_set
    __swig_getmethods__["source"] = _eventpy.EventWithTime_source_get
    if _newclass:source = _swig_property(_eventpy.EventWithTime_source_get, _eventpy.EventWithTime_source_set)
    __swig_setmethods__["dest"] = _eventpy.EventWithTime_dest_set
    __swig_getmethods__["dest"] = _eventpy.EventWithTime_dest_get
    if _newclass:dest = _swig_property(_eventpy.EventWithTime_dest_get, _eventpy.EventWithTime_dest_set)
    def readFromFile_mobile(self, *args): return _eventpy.EventWithTime_readFromFile_mobile(self, *args)
    def readFromFile_tsd(self, *args): return _eventpy.EventWithTime_readFromFile_tsd(self, *args)
    def copyAllButTime(self, *args): return _eventpy.EventWithTime_copyAllButTime(self, *args)
    def getSource(self): return _eventpy.EventWithTime_getSource(self)
    def getDest(self): return _eventpy.EventWithTime_getDest(self)
    def __init__(self, *args): 
        this = _eventpy.new_EventWithTime(*args)
        try: self.this.append(this)
        except: self.this = this
    def getReversedEvent(self): return _eventpy.EventWithTime_getReversedEvent(self)
    def getLongEventInformation(self): return _eventpy.EventWithTime_getLongEventInformation(self)
    __swig_destroy__ = _eventpy.delete_EventWithTime
    __del__ = lambda self : None;
EventWithTime_swigregister = _eventpy.EventWithTime_swigregister
EventWithTime_swigregister(EventWithTime)

class longArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, longArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, longArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _eventpy.new_longArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eventpy.delete_longArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _eventpy.longArray___getitem__(self, *args)
    def __setitem__(self, *args): return _eventpy.longArray___setitem__(self, *args)
    def cast(self): return _eventpy.longArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _eventpy.longArray_frompointer
    if _newclass:frompointer = staticmethod(_eventpy.longArray_frompointer)
longArray_swigregister = _eventpy.longArray_swigregister
longArray_swigregister(longArray)

def longArray_frompointer(*args):
  return _eventpy.longArray_frompointer(*args)
longArray_frompointer = _eventpy.longArray_frompointer

# This file is compatible with both classic and new-style classes.


